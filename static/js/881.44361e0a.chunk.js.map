{"version":3,"file":"static/js/881.44361e0a.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.module.css","components/MovieList/MovieList.jsx","pages/Movies/Movies.module.css","pages/Movies/Movies.jsx","services/API.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MovieList.module.css';\n\nexport const MovieList = ({ movieList }) => {\n  const location = useLocation();\n  return (\n    <ul className={css.list}>\n      {Array.isArray(movieList) &&\n        movieList?.map(({ id, name, title }) => {\n          return (\n            <Link\n              state={{ from: location }}\n              key={id}\n              className={css.item}\n              to={`/movies/${id}`}\n            >\n              <h3>{name || title}</h3>\n            </Link>\n          );\n        })}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movieList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {};","import { useEffect, useState } from 'react';\nimport { getMoviesByQuery } from 'services/API';\nimport { Notify } from 'notiflix';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { useSearchParams } from 'react-router-dom';\nimport  Loader  from 'components/Loader/Loader';\nimport { FaSearch } from 'react-icons/fa';\nimport css from './Movies.module.css';\n\nfunction Movies() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query?.trim()) return;\n    const fetchTrends = async query => {\n      try {\n        setIsLoading(true);\n        const receivedMovies = await getMoviesByQuery(query);\n        if (receivedMovies.length === 0) {\n          Notify.info(`No results for ${query}`);\n        }\n        setMovies(receivedMovies);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrends(query);\n  }, [query]);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notify.failure(`some error occured ${error}`);\n  }, [error]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (e.currentTarget.search.value === '') {\n      Notify.warning('The input field is empty!');\n    }\n    setSearchParams({ query: e.currentTarget.search.value });\n    e.target.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <input name=\"search\" className={css.input} placeholder=\"search...\" />\n        <button type=\"submit\" className={css.btn}>\n          <FaSearch />\n        </button>\n      </form>\n      {isLoading && <Loader />}\n      <MovieList movieList={movies} />\n    </>\n  );\n}\n\nexport default Movies;","import axios from 'axios';\n\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'c9d4617970f7c11d502d08245809af34',\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const getCast = async id => {\n    const { data } = await moviesAPI.get(`/movie/${id}/credits`);\n    return data.cast;\n  };\n\n\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await moviesAPI.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const getTrends = async () => {\n    const { data } = await moviesAPI.get('/trending/movie/week');\n    return data.results;\n  };\n\nexport const getMovieDetails = async id => {\n  const { data } = await moviesAPI.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await moviesAPI.get(`/movie/${id}/reviews`);\n  return data.results;\n};"],"names":["MovieList","movieList","location","useLocation","className","css","Array","isArray","map","id","name","title","state","from","to","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","trim","fetchTrends","getMoviesByQuery","receivedMovies","length","Notify","message","onSubmit","e","preventDefault","currentTarget","search","value","target","reset","placeholder","type","Loader","moviesAPI","axios","baseURL","params","api_key","language","include_adult","getCast","data","cast","results","getTrends","getMovieDetails","getReviews"],"sourceRoot":""}